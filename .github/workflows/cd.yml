name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: kanepark/app
  EC2_HOST: ec2-3-35-214-67.ap-northeast-2.compute.amazonaws.com
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

jobs:
  build-and-push-docker:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      #
      #     name: Set up application.properties
      #     run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      #     gradlew 권한 얻기

#      - name: application.yml 파일 만들기
#        run: |
#          mkdir -p ./src/main/resources
#          echo "${{ secrets.APPLICATION_YML }}"  > ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        env:
          JASYPT_PASSWORD: ${{ secrets.JASYPT_PASSWORD }}  # GitHub Secrets에서 비밀번호 가져오기
        run: ./gradlew build -Djasypt.encryptor.password=${{ secrets.JASYPT_PASSWORD }} --info


      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest


      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest



  deploy-to-ec2:

    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          script: |
            LOG_DIR="/home/ubuntu/app-logs"
            mkdir -p $LOG_DIR
            touch $LOG_DIR/app.log


            sudo docker container prune -f
            sudo docker image prune -af
            sudo docker volume prune -f
            sudo docker system prune -af --volumes
            
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            
            sudo docker pull ${{ env.DOCKER_HUB }} kanepark/app:latest
            # sudo docker run --name container1 -d -p 80:8080 -e TZ=Asia/Seoul ${{ env.DOCKER_HUB }} kanepark/app:latest
            sudo docker run --name container1 -d -p 80:8080 -e TZ=Asia/Seoul \
              -v $LOG_DIR/app.log:/app/logs/app.log ${{ env.DOCKER_IMAGE_NAME }}:latest